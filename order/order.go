// Code generated by tars2go 1.2.3, DO NOT EDIT.
// This file was generated from proto/order.tars
// Package order comment
package order

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// Order struct implement
type Order struct {
	Id          string   `json:"id" tars:"id,tag:1,require:true"`
	Items       []string `json:"items" tars:"items,tag:2,require:false"`
	Description string   `json:"description" tars:"description,tag:3,require:false"`
	Price       float32  `json:"price" tars:"price,tag:4,require:true"`
	Destination string   `json:"destination" tars:"destination,tag:5,require:false"`
}

func (st *Order) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Order) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Id, 1, true)
	if err != nil {
		return err
	}

	have, ty, err = readBuf.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}
	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}
			st.Items = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {
				err = readBuf.ReadString(&st.Items[i0], 0, true)
				if err != nil {
					return err
				}
			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}
		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}
		}
	}

	err = readBuf.ReadString(&st.Description, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadFloat32(&st.Price, 4, true)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Destination, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Order) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Order, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Order) WriteTo(buf *codec.Buffer) (err error) {
	err = buf.WriteString(st.Id, 1)
	if err != nil {
		return err
	}

	if len(st.Items) > 0 {
		err = buf.WriteHead(codec.LIST, 2)
		if err != nil {
			return err
		}
		err = buf.WriteInt32(int32(len(st.Items)), 0)
		if err != nil {
			return err
		}
		for _, v := range st.Items {
			err = buf.WriteString(v, 0)
			if err != nil {
				return err
			}
		}
	}

	if st.Description != "" {
		err = buf.WriteString(st.Description, 3)
		if err != nil {
			return err
		}
	}

	err = buf.WriteFloat32(st.Price, 4)
	if err != nil {
		return err
	}

	if st.Destination != "" {
		err = buf.WriteString(st.Destination, 5)
		if err != nil {
			return err
		}
	}

	return err
}

// WriteBlock encode struct
func (st *Order) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
